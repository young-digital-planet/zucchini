<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" 
						creationComplete="onCreationComplete()" xmlns:local="*" 
						width="870" height="860"
						backgroundColor="#dddddd"
						title="Zucchini GUI"
						paddingTop="10"
						invoke="onInvoke(event)" xmlns:view="utopia.view.*"
						>
	<mx:Script>
		<![CDATA[
			import com.carlcalderon.arthropod.Debug;
			
			import pl.ydp.automation.AutomationCaptain;
			import pl.ydp.automation.configuration.impl.scripts.fs.FilesystemScripts;
			import pl.ydp.automation.execution.report.impl.formatters.JUnitReportFormatter;
			import pl.ydp.automation.execution.report.impl.formatters.LogReportFormatter;
			import pl.ydp.automation.execution.report.impl.targets.ArthropodReportTarget;
			import pl.ydp.automation.execution.report.impl.targets.FilesystemReportTarget;
			import pl.ydp.automation.execution.storage.snapshot.SnapshotsModel;
			
			import utopia.UtopiaAppContext;
			import utopia.parameters.UtopiaParameters;
		
			
			
			private var captain:AutomationCaptain;
			
			[Bindable]
			private var _configurated:Boolean = false;
			[Bindable]
			private var _prepared:Boolean = false;
			
			
			private const NORMAL_EXECUTION_LABEL:String = 'normalny';
			private const SLOW_EXECUTION_LABEL:String = 'wolny';
			
			private const SNAPSHOT_COMPARE_LABEL:String = 'porównywanie';
			private const SNAPSHOT_PATTERN_LABEL:String = 'wzorzec';
			
			private const AUTOSTART_ARG:String = 'autostart';
			
			private var _autoStart:Boolean = false;
			
			
			private function onInvoke( event:InvokeEvent ):void
			{
				if( event.arguments.length > 0 ){
					var arg:String = ( event.arguments[ 0 ] as String ).toLowerCase();
					if( arg == AUTOSTART_ARG ){
						_autoStart = true;
					}
				}
				
				if( _autoStart ){
					prepare();
				}
			}
			
			private function get manualRun():Boolean
			{
				return !_autoStart;
			}
			
			private function onCreationComplete():void
			{
				setViewerDir();
				
				captain = new AutomationCaptain();
				
				captain.context = new UtopiaAppContext();
				captain.parameters =  new UtopiaParameters();
				
//				captain.setSettings( new ISettings() );
				
				captain.configuratingCompleted.addOnce( onConfiguratingCompleted );
				captain.configure();
			}
			
			private function onConfiguratingCompleted():void
			{
				_configurated = true;
				
//				captain.setSettings( new ISettings() );
			}
			
			
			private function prepare():void
			{
//				Debug.log( 'prepare()' );
				
				if( manualRun ){
					captain.settings.reportsFormatters = [ new LogReportFormatter() ];
					captain.settings.reportsTargets = [ new ArthropodReportTarget() ];
				}else{
					captain.settings.reportsFormatters = [ new JUnitReportFormatter() ];
					captain.settings.reportsTargets = [ new FilesystemReportTarget() ];
				}
				
				captain.settings.scriptsToPrepareNames = dirsViewer.selectedScripts;
				captain.settings.stopOnFailure = stopOnFailureCheckbox.selected;
//				if( scritpsToExecuteNames.text != '' )
//					captain.settings.scriptsToExecuteNames = [ scritpsToPrepareNames.text ];
				
				captain.settings.snapshotMode = snapshotMode;
				captain.settings.stepsInterval = stepsInterval;
				
				captain.preparingCompleted.addOnce( onPreparingCompleted );
				captain.prepare();
			}
			
			private function onPreparingCompleted():void
			{
				_prepared = true;
				
				structureContainer.addChild( captain.structure.component as DisplayObject );
				
				captain.completed.addOnce( onCompleted );
				captain.start();
				
			}
			private function onCompleted():void
			{
//				Debug.log( 'onCompleted()' );
				
				if( _autoStart ){
					exit();
				}
			}
			
			
			private function get stepsInterval():int
			{
				var interval:int;
				if( executionModeGroup.selectedValue ==  NORMAL_EXECUTION_LABEL ){
					interval = 0;
				}else{
					interval = parseInt( stepsIntervalInput.text );
				}
				return interval;
			}
			
			private function get snapshotMode():String
			{
				var mode:String;
				if( snapshotModeGroup.selectedValue == SNAPSHOT_PATTERN_LABEL ){
					mode = SnapshotsModel.PATTERN_MODE;
				}else{
					mode = SnapshotsModel.COMPARE_MODE;
				}
				return mode;
			}
			
			private function setViewerDir():void
			{
				var featuresPath:String = 
					FilesystemScripts.FEATURES_PARENT_DIRECTORY + 
					'/' + 
					FilesystemScripts.FEATURES_FOLDER;
				dirsViewer.featuresRootDir = File.applicationDirectory.resolvePath( featuresPath );
			}
			
			
		]]>
	</mx:Script>
	
	<mx:RadioButtonGroup id="executionModeGroup"/>
	<mx:RadioButtonGroup id="snapshotModeGroup"/>
	
	
	<mx:VBox width="100%" height="250">
		<mx:Label text="Ustawienia" fontSize="18"/>
		
		<mx:HRule width="100%"/>
			
		<mx:HBox width="100%" height="100%">
					
			<view:FeaturesDirectoriesViewer id="dirsViewer"/>

			<mx:VBox width="420"
					 height="100%" 
					 horizontalAlign="right">
				
						<mx:HBox width="100%">
							
							<mx:Label text="Tryb wykonywania" width="200"/>
							
							<mx:RadioButton groupName="executionModeGroup" 
											label="{NORMAL_EXECUTION_LABEL}" 
											width="100"
											selected="true"/>
							<mx:RadioButton groupName="executionModeGroup" 
											label="{SLOW_EXECUTION_LABEL}" 
											width="100"/>
							
							
							
						</mx:HBox>
						<mx:HBox width="100%">
							
							<mx:Label text="Interwał między krokami (ms)" width="200"/>
							<mx:TextInput id="stepsIntervalInput" 
										  text="500" 
										  width="50" 
										  textAlign="right"
										  maxChars="5"
										  restrict="0-9"
										  enabled="{executionModeGroup.selectedValue == 'wolny'}"/>
							
						</mx:HBox>
						<mx:HBox width="100%">
							
							<mx:Label text="Tryb wykonywania snapshotów" width="200"/>
							
							<mx:RadioButton groupName="snapshotModeGroup" 
											label="{SNAPSHOT_COMPARE_LABEL}" 
											width="100"
											selected="true"/>
							<mx:RadioButton groupName="snapshotModeGroup" 
											label="{SNAPSHOT_PATTERN_LABEL}" 
											width="100"/>
							
						</mx:HBox>
						<mx:HBox width="100%">
							
							<mx:Text text="Przerwij feature jeśli scenariusz nie przeszedł" width="200"/>
							<mx:CheckBox id="stopOnFailureCheckbox"/>
						</mx:HBox>
						
						<mx:Spacer height="100%"/>		
				
						<mx:Button label="uruchom testy" 
						   buttonMode="true"
						   click="{ prepare() }"
						   enabled="{_configurated}"
						   width="130"
						   height="50"/>
				
					</mx:VBox>
				
		</mx:HBox>
				
		
	</mx:VBox>
	<mx:VBox width="100%">
		
		<mx:Label text="Widok aplikacji" fontSize="18"/>
		
		<mx:HRule width="100%"/>
		
		<mx:Canvas id="structureContainer" backgroundColor="#dddddd"/>
		
	</mx:VBox>
	
	
</mx:WindowedApplication>
